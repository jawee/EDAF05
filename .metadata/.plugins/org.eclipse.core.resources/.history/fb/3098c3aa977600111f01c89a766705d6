import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Scanner;

public class Search {
	public static ArrayList<String> wordList = new ArrayList<String>();
    private static final String START = "other";
    private static final String END = "there";

    public static void main(String[] args) {
        // this graph is directional
        Graph graph = new Graph();
        Search s = new Search();

		for (int i = 0; i < wordList.size(); i++) {
			char second = wordList.get(i).charAt(1);
			char third = wordList.get(i).charAt(2);
			char fourth = wordList.get(i).charAt(3);
			char fifth = wordList.get(i).charAt(4);

			for (int j = 0; j < wordList.size(); j++) {
				if (i != j) {
					char[] c = wordList.get(j).toCharArray();
					ArrayList<Character> charList = new ArrayList<Character>();
					for (char ch : c) {
						charList.add(ch);
					}
					if (charList.contains(second)) {
						charList.remove(charList.indexOf(second));
						if (charList.contains(third)) {
							charList.remove(charList.indexOf(third));
							if (charList.contains(fourth)) {
								charList.remove(charList.indexOf(fourth));
								if (charList.contains(fifth)) {
									graph.addEdge(wordList.get(i), wordList.get(j));
								}
							}
						}
					}

				}
			}

		}
	
        LinkedList<String> visited = new LinkedList();
        visited.add(START);
        new Search().breadthFirst(graph, visited);
    }

    private void breadthFirst(Graph graph, LinkedList<String> visited) {
        LinkedList<String> nodes = graph.adjacentNodes(visited.getLast());
        // examine adjacent nodes
        for (String node : nodes) {
            if (visited.contains(node)) {
                continue;
            }
            if (node.equals(END)) {
                visited.add(node);
                printPath(visited);
                visited.removeLast();
                break;
            }
        }
        // in breadth-first, recursion needs to come after visiting adjacent nodes
        for (String node : nodes) {
            if (visited.contains(node) || node.equals(END)) {
                continue;
            }
            visited.addLast(node);
            breadthFirst(graph, visited);
            visited.removeLast();
        }
    }

    private void printPath(LinkedList<String> visited) {
        for (String node : visited) {
            System.out.print(node);
            System.out.print(" ");
        }
        System.out.println();
    }
    
    private void read(String filename) {
		File f = new File(filename);
		Scanner scan = null;
		try {
			scan = new Scanner(f);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		while (scan.hasNext()) {
			wordList.add(scan.nextLine());
		}
		scan.close();

	}

	public void createAdjacentList(Graph g) {


}