import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;

public class SequenceAlignment {
	private HashMap<String, String> sequenceMap;
	private ArrayList<String> nameList;

	public SequenceAlignment(File f) {
		read(f);
	}

	private void read(File f) {
		sequenceMap = new HashMap<String, String>();
		nameList = new ArrayList<String>();
		Scanner scan = null;
		try {
			scan = new Scanner(f);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		while (scan.hasNextLine()) {
			String s = scan.nextLine();
			if (s.startsWith(">")) {
				s = s.substring(1, s.length() - 1);
				System.out.println(s);
				nameList.add(s);
				sequenceMap.put(s, scan.nextLine());
			}
		}
	}

	public void sheisse() {
		String x = "KQRIKAAKABK";
		String y = "KAK";
		int M = x.length();
		int N = y.length();

		// opt[i][j] = length of LCS of x[i..M] and y[j..N]
		int[][] opt = new int[M + 1][N + 1];

		// compute length of LCS and all subproblems via dynamic programming
		for (int i = M - 1; i >= 0; i--) {
			for (int j = N - 1; j >= 0; j--) {
				if (x.charAt(i) == y.charAt(j))
					opt[i][j] = opt[i + 1][j + 1] + 1;
				else
					opt[i][j] = Math.max(opt[i + 1][j], opt[i][j + 1]);
			}
		}

		// recover LCS itself and print it to standard output
		int i = 0, j = 0;
		while (i < M && j < N) {
			if (x.charAt(i) == y.charAt(j)) {
				System.out.print(x.charAt(i));
				i++;
				j++;
			} else if (opt[i + 1][j] >= opt[i][j + 1])
				i++;
			else
				j++;
		}
		System.out.println();

	}

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		new SequenceAlignment(new File("Toy_FASTAs.in"));
	}

}
