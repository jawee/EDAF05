import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Scanner;

public class Search {
	public static ArrayList<String> wordList = new ArrayList<String>();
	private static String START = "write";
	private static String END = "river";
	private static int length = Integer.MAX_VALUE;
	private static String datFile = "words-250.dat";
	private static String inFile = "words-250-test.in";

	public static void main(String[] args) {
		// this graph is directional
		Graph graph = new Graph();
		Search s = new Search();
		
		File fdat = new File(datFile);
		Scanner scan = null;
		try {
			scan = new Scanner(fdat);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		while (scan.hasNext()) {
			wordList.add(scan.nextLine());
		}
		scan.close();

		for (int i = 0; i < wordList.size(); i++) {
			char second = wordList.get(i).charAt(1);
			char third = wordList.get(i).charAt(2);
			char fourth = wordList.get(i).charAt(3);
			char fifth = wordList.get(i).charAt(4);

			for (int j = 0; j < wordList.size(); j++) {
				if (i != j) {
					char[] c = wordList.get(j).toCharArray();
					ArrayList<Character> charList = new ArrayList<Character>();
					for (char ch : c) {
						charList.add(ch);
					}
					if (charList.contains(second)) {
						charList.remove(charList.indexOf(second));
						if (charList.contains(third)) {
							charList.remove(charList.indexOf(third));
							if (charList.contains(fourth)) {
								charList.remove(charList.indexOf(fourth));
								if (charList.contains(fifth)) {
									graph.addEdge(wordList.get(i),
											wordList.get(j));
								}
							}
						}
					}

				}
			}

		}
		
		File fin = new File(inFile);
		Scanner scan2 = null;
		try {
			scan2 = new Scanner(fin);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		ArrayList<String> wordPairs = new ArrayList<String>();
		while (scan2.hasNextLine()) {
			wordPairs.add(scan2.nextLine());
		}
		
		for (int i = 0; i < wordPairs.size(); i++) {
			String[] words = wordPairs.get(i).split(" ");
			LinkedList<String> visited = new LinkedList();
			START = words[0];
			END = words[1];
			visited.add(START);
			new Search().breadthFirst(graph, visited);
			if(length == Integer.MAX_VALUE) {
				System.out.println(-1);
			} else {
				System.out.println(length-1);
			}
			length = Integer.MAX_VALUE;
		}

		
	}

	private void breadthFirst(Graph graph, LinkedList<String> visited) {
		LinkedList<String> nodes = graph.adjacentNodes(visited.getLast());
		// examine adjacent nodes
		for (String node : nodes) {
			if (visited.contains(node)) {
				continue;
			}
			if (node.equals(END)) {
				visited.add(node);
//				printPath(visited);
				if(visited.size() < length) {
					length = visited.size();
				}
				visited.removeLast();
				break;
			}
		}
		// in breadth-first, recursion needs to come after visiting adjacent
		// nodes
		for (String node : nodes) {
			if (visited.contains(node) || node.equals(END)) {
				continue;
			}
			visited.addLast(node);
			breadthFirst(graph, visited);
			visited.removeLast();
		}
	}

	private void printPath(LinkedList<String> visited) {
		for (String node : visited) {
			System.out.print(node);
			System.out.print(" ");
		}
		System.out.println();
	}

	private void read(String filename) {
		

	}

}